package main

import (
	"fmt"
	"io"
	"os"
	"path/filepath"

	"github.com/avenga/couper/errors"
)

func main() {
	println("generating error types:\n")

	errTypes := map[string]int{}
	sortedErrTypes := make([]string, len(errors.Definitions))
	for idx, errImpl := range errors.Definitions {
		kinds := errImpl.Kinds()
		if len(kinds) == 0 {
			must(fmt.Errorf("error kind must be defined"))
		}

		kind := kinds[0]
		if _, exist := errTypes[kind]; exist {
			must(fmt.Errorf("error kind already defined: %s", kind))
		}
		errTypes[kind] = idx
		sortedErrTypes[idx] = kind
	}

	for _, kind := range sortedErrTypes {
		println("\t", kind, "-->", errors.SnakeToCamel(kind))
	}

	generated, err := os.Create(filepath.Join("errors", "types_generated.go"))
	must(err)
	defer generated.Close()

	_, err = io.WriteString(generated, fmt.Sprintf(`// Code generated by go generate; DO NOT EDIT.

package errors

var (
`))
	must(err)

	for idx, kind := range sortedErrTypes {
		_, err = io.WriteString(generated, fmt.Sprintf("\t%s = Definitions[%d]\n", errors.SnakeToCamel(kind), idx))
		must(err)
	}

	_, err = io.WriteString(generated, fmt.Sprintf(`
)

// typeDefinitions holds all related error definitions which are
// catchable with an error_handler definition.
type typeDefinitions map[string]*Error

// types holds all implemented ones. The name must match the structs
// snake-name for fallback purposes. See TypeToSnake usage and reference.
var types = typeDefinitions{
`))

	must(err)

	for _, kind := range sortedErrTypes {
		_, err = io.WriteString(generated, fmt.Sprintf("\t%q: %s,\n", kind, errors.SnakeToCamel(kind)))
		must(err)
	}

	_, err = io.WriteString(generated, fmt.Sprintf(`
}

// IsKnown tells the configuration callee if Couper
// has a defined error type with the given name.
func IsKnown(errorType string) bool {
	_, known := types[errorType]
	return known
}

`))

	must(err)

}

func must(err error) {
	if err != nil {
		println(err.Error())
		os.Exit(1)
	}
}
